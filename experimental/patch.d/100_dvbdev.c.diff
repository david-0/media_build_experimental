--- linux/drivers/media/dvb-core/dvbdev.c,org	2012-12-28 00:04:05.000000000 +0100
+++ linux/drivers/media/dvb-core/dvbdev.c	2013-09-05 21:17:29.000000000 +0200
@@ -47,7 +48,7 @@ static DEFINE_MUTEX(dvbdev_register_lock
 
 static const char * const dnames[] = {
 	"video", "audio", "sec", "frontend", "demux", "dvr", "ca",
-	"net", "osd"
+	"net", "osd", "ci", "mod", "ns", "nsd"
 };
 
 #ifdef CONFIG_DVB_DYNAMIC_MINORS
@@ -68,7 +69,7 @@ static int dvb_device_open(struct inode
 {
 	struct dvb_device *dvbdev;
 
-	mutex_lock(&dvbdev_mutex);
+	//mutex_lock(&dvbdev_mutex);
 	down_read(&minor_rwsem);
 	dvbdev = dvb_minors[iminor(inode)];
 
@@ -91,12 +92,12 @@ static int dvb_device_open(struct inode
 		}
 		fops_put(old_fops);
 		up_read(&minor_rwsem);
-		mutex_unlock(&dvbdev_mutex);
+		//mutex_unlock(&dvbdev_mutex);
 		return err;
 	}
 fail:
 	up_read(&minor_rwsem);
-	mutex_unlock(&dvbdev_mutex);
+	//mutex_unlock(&dvbdev_mutex);
 	return -ENODEV;
 }
 
@@ -418,8 +419,10 @@ int dvb_usercopy(struct file *file,
 	}
 
 	/* call driver */
+	//mutex_lock(&dvbdev_mutex);
 	if ((err = func(file, cmd, parg)) == -ENOIOCTLCMD)
 		err = -ENOTTY;
+	//mutex_unlock(&dvbdev_mutex);
 
 	if (err < 0)
 		goto out;
@@ -438,6 +441,7 @@ out:
 	kfree(mbuf);
 	return err;
 }
+EXPORT_SYMBOL(dvb_usercopy);
 
 static int dvb_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
